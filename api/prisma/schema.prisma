// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// ---------------- Auth ----------------
type ConfirmEmailInfo {
  expiry           DateTime
  attemptsMade     Int      @default(0)
  confirmEmailCode Int
}

// ---------------- User ----------------
model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email String @unique()

  firstName String

  lastName String

  hashedPassword String

  role UserRole @default(STANDARD)

  createdAt DateTime @default(now()) @db.Date

  confirmEmailInfo ConfirmEmailInfo?

  // /** The timestamp when the user confirmed their email */
  confirmedAt DateTime?

  verifiedAt DateTime?
  setup      Setup?
  Dataset    Dataset[] @relation(fields: [datasetId], references: [id])
  datasetId  String[]  @db.ObjectId
}

enum UserRole {
  ADMIN
  STANDARD
}

// ---------------- Dataset ----------------
model Dataset {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  name        String          @unique
  description String?
  createdAt   DateTime        @default(now()) @db.Date
  updatedAt   DateTime        @default(now()) @db.Date
  license     DatasetLicense  @default(PUBLIC)
  managers    User[]          @relation(fields: [managerIds], references: [id])
  managerIds  String[]        @db.ObjectId
  datasetType DatasetType
  tabularData TabularDataset?
}

enum DatasetLicense {
  PUBLIC
  OTHER
}

// Tabular dataset
type TabularDataset {
  // string : string | number
  data        Json[]
  // should be keys in the data object
  primaryKeys String[]
  columns     DatasetColumn[]
}

type DatasetColumn {
  name           String
  type           ColumnType
  nullable       Boolean
  summary        ColumnSummary
  validation     ColumnValidation
  dataPermission PermissionLevel
}

enum DatasetType {
  BASE
  TABULAR
  BINARY
}

enum ColumnType {
  STRING_COLUMN
  INT_COLUMN
  FLOAT_COLUMN
  ENUM_COLUMN
  DATETIME_COLUMN
}

enum PermissionLevel {
  PUBLIC
  LOGIN
  VERIFIED
  MANAGER
}

// column summary
type ColumnSummary {
  count           Int
  intSummary      IntColumnSummary?
  floatSummary    FloatColumnSummary?
  enumSummary     EnumColumnSummary?
  datetimeSummary DateTimeColumnSummary?
}

type IntColumnSummary {
  max    Int
  min    Int
  mean   Float
  median Float
  mode   Int
  std    Float
}

type FloatColumnSummary {
  max    Float
  min    Float
  mean   Float
  median Float
  std    Float
}

type EnumColumnSummary {
  distribution Json
}

type DateTimeColumnSummary {
  max DateTime
  min DateTime
}

// column validation
type ColumnValidation {
  stringValidation StringColumnValidation?
}

type StringColumnValidation {
  min   Int
  max   Int?
  regex String?
}

type NumericColumnValidation {
  min Float
  max Float
}

type EnumColumnValidation {
  allowedValues String[]
}

type DatetimeColumnValidation {
  min     DateTime
  max     DateTime
  passISO Boolean
}

// ---------------- Setup ----------------
model Setup {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt        DateTime         @default(now()) @db.Date
  updatedAt        DateTime         @default(now()) @db.Date
  admin            User             @relation(fields: [adminId], references: [id])
  adminId          String           @unique @db.ObjectId
  userVerification UserVerification
}

type UserVerification {
  method     VerificationMethod
  emailRegex String?
}

enum VerificationMethod {
  MANUAL
  CONFIRM_EMAIL
  REGEX_EMAIL
}
